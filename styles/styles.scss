@use "sass:color";

/* CSS units (summary of https://every-layout.dev/rudiments/units/)
 rem: font-size relative to browser default
 em: font-size relative to font-size of immediate context
  ("As a rule of thumb, em units are better for sizing inline elements, and rem units are better for block elements." 
 ch: 1ch is based on the width of your font’s 0 character
 ex: 1ex is equal to the height of your font’s x character
 vw: 1vw is equal to 1% of the screen’s width
 vh: 1vh is equal to 1% of the screen’s height
*/

:root {
  /* variables */

  /* modular scale (https://every-layout.dev/rudiments/modular-scale/) */
  --ratio: 1.5;
  --s-5: calc(var(--s-4) / var(--ratio));
  --s-4: calc(var(--s-3) / var(--ratio));
  --s-3: calc(var(--s-2) / var(--ratio));
  --s-2: calc(var(--s-1) / var(--ratio));
  --s-1: calc(var(--s0) / var(--ratio));
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));

  /* typography */
  --font-size-base: var(--s0);
  --font-size-biggish: var(--s1);
  --font-size-big: var(--s2);
  --font-size-bigger: var(--s3);
  --line-height: var(--ratio);
  --line-height-small: calc(0.8 * var(--line-height));
  --measure: 60ch; /* default width of a line of text, in characters */

  font-size: calc(0.333vw + var(--s0));
  line-height: var(--line-height);
  font-family: serif;
  color: #000000;
  background-color: #ffffff;
}

*,
:after,
:before {
  box-sizing: border-box;
  background-color: inherit;
  font-family: inherit;
  color: inherit;
  overflow-wrap: break-word;
  margin: 0;
  padding: 0;
  border: 0 solid;
}

/* axioms (https://every-layout.dev/rudiments/axioms/) */

/* measure - width of a line of text, in characters */
* {
  max-width: var(--measure);
}

html,
body,
div,
header,
nav,
main,
footer {
  max-width: none;
}

/* elements */
h1,
h2,
h3 {
  font-family: sans-serif;
  line-height: var(--line-height-small);
  margin-bottom: var(--s1);

  & .subhead {
    font-size: 0.5em;
    // color: color.adjust(currentColor, $lightness: -30%);
  }
}

h1 {
  font-size: var(--font-size-bigger);
}

h2 {
  font-size: var(--font-size-big);
}

h3 {
  font-size: var(--font-size-biggish);
}

p {
  margin-bottom: 1em;
}

a {
  text-decoration: none;
}

/* utilities */
.font-size\:base {
  font-size: var(--font-size-base) !important;
}

.font-size\:biggish {
  font-size: var(--font-size-biggish) !important;
}

.font-size\:big {
  font-size: var(--font-size-big) !important;
}

.font-size\:bigger {
  font-size: var(--font-size-bigger) !important;
}

/* components */
.stack {
  --space: var(--s1);
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack > * + * {
  margin-top: var(--space);
}

.center {
  box-sizing: content-box;
  margin-left: auto;
  margin-right: auto;
  max-width: var(--measure);
  padding-left: var(--s1);
  padding-right: var(--s1);
}
